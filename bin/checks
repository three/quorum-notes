#!/usr/bin/env zsh
set -eu -o pipefail
zparseopts -D -E -F -help=OPT_HELP -darker=OPT_DARKER
[[ -n $OPT_HELP ]] && cat <<EOF && exit 0
Usage
    checks [--darker]

Description
    Runs the style checker on all files modified since hotfix

Bugs
    Darker support is more or less broken
EOF

# This might not be necessary
source "$QUORUM_TOOLS_DIR/quorum.sh"

echo "Ensuring the environment has node..."
(which node >/dev/null && node --version) || {
    NVM_DIRECTORY="$DOTFILES/deps/nvm"
    source "$NVM_DIRECTORY/nvm.sh"
    nvm use node
}
echo

echo "Loading virtualenv..."
source "$HOME/dev/qsite-local/venv/bin/activate"
export PYTHONPATH="$(pwd)"
echo

if [[ -n $OPT_DARKER ]]; then
    echo "Detecting if the environment has darker..."
    which darker >/dev/null && {
        darker --version
        export USE_DARKER=1
    } || (echo "Darker not detected. USE_DARKER=${USE_DARKER:-unset}" && exit 1)
    echo
fi

# We define "files modified since hotfix" as files that currently exist on the filesystem
# whcih appear in the diff between the common ancestor of HEAD and hotfix.
echo "Searching for files to check..."
COMMON_ANCESTOR="$(git merge-base HEAD origin/hotfix/$(latesthotfix))"
echo "Common Ancestor: $COMMON_ANCESTOR"
ALTERED_FILES="$(git diff --name-only $COMMON_ANCESTOR)"
FILES_LISTING="$(git ls-files)"
RELEVANT_FILES="$(comm -12 =(sort <<<"$ALTERED_FILES") =(sort <<<"$FILES_LISTING"))"

[[ -z "$RELEVANT_FILES" ]] && (
    echo "No files to check!"
    return 0
)
echo

RETURN_CODE=0
(echo "$RELEVANT_FILES" | xargs python tests/check/__main__.py) || {
    RETURN_CODE="$?"
}

if [[ $OPT_DARKER ]]; then
    echo "Checking darker..."
    if which darker >/dev/null && "${USE_DARKER:-0}" = 1
    then
        echo "Darker Version: $(darker --version)"
        if darker --check -r "$COMMON_ANCESTOR" --line-length 120 . >/dev/null
        then
            echo "Passed"
        else
            echo "Darker returned $?"
            [[ "$RETURN_CODE" == 0 ]] && RETURN_CODE=1
        fi
    else
        echo "Darker not in your PATH, skipping"
    fi
    echo
fi

echo "Exit Status $RETURN_CODE"
exit $?

